/*
 * Copyright 2010-2011  OSLL osll@osll.spb.ru
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * 3. The name of the author may not be used to endorse or promote
 *    products derived from this software without specific prior written
 *    permission.
 *
 * The advertising clause requiring mention in adverts must never be included.
 */
/*----------------------------------------------------------------- !
 * PROJ: OSLL/geo2tag
 * ---------------------------------------------------------------- */

#include "GeneratorDaemon.h"
#include <QDebug>
#include <QEventLoop>
#include "JsonChannel.h"
#include "JsonDataMark.h"
#include <QTextStream>
#include <QStringList>
GeneratorDaemon::GeneratorDaemon()
{
}


GeneratorDaemon::GeneratorDaemon(const QString& channelName):
m_isConnected(false),m_loginQuery(NULL),m_tagQuery(NULL),m_channelName(channelName)
{
  moveToThread(this);
  readMarks();
}


void GeneratorDaemon::readMarks()
{
  QFile file(m_channelName+".trace");
  file.open(QIODevice::ReadOnly | QIODevice::Text);
  qDebug() << "try to open file "<< m_channelName+".trace";
  QTextStream in(&file);
  QString line = in.readLine();
  QStringList coords;
  while (!line.isNull())
  {
    coords=line.split(",", QString::SkipEmptyParts);
    qDebug() << "pushing mark into m_marks " << coords.at(1).toDouble()<< " ," << coords.at(0).toDouble();
    m_marks.push_back(QPointF(coords.at(1).toDouble(),coords.at(0).toDouble()));
    line = in.readLine();
  }
}


void GeneratorDaemon::run()
{
  qDebug() << "thread started";
  QEventLoop eventLoop;
  m_loginQuery = new LoginQuery("DemoUser", "test", this);
  connect(m_loginQuery, SIGNAL(connected()), SLOT(onConnected()));
  connect(m_loginQuery, SIGNAL(errorOccured(QString)), SLOT(onError(QString)));
  m_loginQuery->doRequest();
  for (;;)
  {
    if (m_isConnected)
    {
      qDebug() << "connected: auth_token=" << m_loginQuery->getUser()->getToken();
      qDebug() << "tagQuery " << m_tagQuery;
      if (m_tagQuery)
      {
        for (int i=0;i<m_marks.size();i++)
        {
          m_tagQuery->getTag()->setTime(QDateTime::currentDateTime());
          m_tagQuery->getTag()->setLatitude(m_marks.at(i).x());
          m_tagQuery->getTag()->setLongitude(m_marks.at(i).y());
          m_tagQuery->doRequest();
          qDebug() << "adding mark";
          eventLoop.processEvents(QEventLoop::ExcludeUserInputEvents, 1000);
          QThread::msleep(5000);
        }
      }
    }
    eventLoop.processEvents(QEventLoop::ExcludeUserInputEvents, 1000);
    QThread::msleep(5000);
  }
}


void GeneratorDaemon::onTagAdded()
{
  qDebug() << "tag added!";
}


void GeneratorDaemon::onConnected()
{
  m_isConnected = true;
  if(m_tagQuery == NULL)
  {
    QSharedPointer<DataMark> mark(new JsonDataMark(0,0,0,"part of route "+m_channelName,
      "generated by generator:)","unknown",QDateTime::currentDateTime()));
    QSharedPointer<Channel> channel(new JsonChannel(m_channelName,"dummy channel"));
    mark->setChannel(channel);
    mark->setUser(m_loginQuery->getUser());
    qDebug() << "try to create WriteTagQuery";
    m_tagQuery = new WriteTagQuery(mark,this);
    qDebug() << m_tagQuery;
    connect(m_tagQuery, SIGNAL(tagAdded()), SLOT(onTagAdded()));
    connect(m_tagQuery, SIGNAL(errorOccured(QString)), SLOT(onError(QString)));
  }
}


GeneratorDaemon::~GeneratorDaemon()
{
}


void GeneratorDaemon::onError(QString error)
{
}
